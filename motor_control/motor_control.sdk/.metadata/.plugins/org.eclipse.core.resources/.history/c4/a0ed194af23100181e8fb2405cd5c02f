/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"

#include "xparameters.h"
#include "xgpio.h"
#include "xstatus.h"

#define PUSH_BUTTON_ID	XPAR_AXI_GPIO_0_DEVICE_ID	/* The PushButton Device */
#define PMOD_MOTOR_ID	XPAR_AXI_GPIO_1_DEVICE_ID	/* The PmodMotor Device */
#define PUSH_BUTTON_CHANNEL	1
#define PMOD_MOTOR_CHANNEL	1
#define SPEED	500000
#define BTND	2
#define BTNU	16

XGpio gpio0; // push button
XGpio gpio1; // pmod motor

void rotate_cw(){
	print("Rotate cw\n\r");
	// step motor

	for (int i = 0; i < 1; i++){
		XGpio_DiscreteWrite(&gpio1, PMOD_MOTOR_CHANNEL, 12);
		for (int i = 0; i < 2 * SPEED; i++);
		XGpio_DiscreteWrite(&gpio1, PMOD_MOTOR_CHANNEL, 6);
		for (int i = 0; i < 2 * SPEED; i++);
		XGpio_DiscreteWrite(&gpio1, PMOD_MOTOR_CHANNEL, 3);
		for (int i = 0; i < 2 * SPEED; i++);
		XGpio_DiscreteWrite(&gpio1, PMOD_MOTOR_CHANNEL, 9);
		for (int i = 0; i < 2 * SPEED; i++);
		XGpio_DiscreteWrite(&gpio1, PMOD_MOTOR_CHANNEL, 12);
		for (int i = 0; i < 2 * SPEED; i++);
	}

	/*
	for (int i = 0; i < 10000; i++){
		if (i < 2000)
			XGpio_DiscreteWrite(&gpio1, PMOD_MOTOR_CHANNEL, 12);
		else
			XGpio_DiscreteWrite(&gpio1, PMOD_MOTOR_CHANNEL, 8);
	}
	*/
}

void rotate_ccw(){
	print("Rotate ccw\n\r");
	// step motor
	for (int i = 0; i < 1; i++){
		XGpio_DiscreteWrite(&gpio1, PMOD_MOTOR_CHANNEL, 12);
		for (int i = 0; i < 2 * SPEED; i++);
		XGpio_DiscreteWrite(&gpio1, PMOD_MOTOR_CHANNEL, 9);
		for (int i = 0; i < 2 * SPEED; i++);
		XGpio_DiscreteWrite(&gpio1, PMOD_MOTOR_CHANNEL, 3);
		for (int i = 0; i < 2 * SPEED; i++);
		XGpio_DiscreteWrite(&gpio1, PMOD_MOTOR_CHANNEL, 6);
		for (int i = 0; i < 2 * SPEED; i++);
		XGpio_DiscreteWrite(&gpio1, PMOD_MOTOR_CHANNEL, 12);
		for (int i = 0; i < 2 * SPEED; i++);
	}
}

int gpio_init(){

	int Status;
	/* Initialize push button*/
	Status = XGpio_Initialize(&gpio0, PUSH_BUTTON_ID);
	if (Status != XST_SUCCESS)
		return XST_FAILURE;

	/* Set direction for push button to input */
	XGpio_SetDataDirection(&gpio0, PUSH_BUTTON_CHANNEL, 0x1f);

	/* Initialize PMOD*/
	Status = XGpio_Initialize(&gpio1, PMOD_MOTOR_ID);
	if (Status != XST_SUCCESS)
		return XST_FAILURE;

	/* Set direction for pmod motor to output */
	XGpio_SetDataDirection(&gpio1, PMOD_MOTOR_CHANNEL, 0);

	return XST_SUCCESS;
}

int main()
{
    init_platform();

    // Initialize all gpios
    int success = gpio_init();
    if (success == XST_FAILURE)
    	return XST_FAILURE;

    while (1){
    	// read push buttons
    	int button = XGpio_DiscreteRead(&gpio0, PUSH_BUTTON_CHANNEL);

    	if (button == BTND){ //
    		rotate_cw();
    	} else if (button == BTNU){
    		rotate_ccw();
    	}
    }


    cleanup_platform();
    return XST_SUCCESS;
}
